#!/usr/bin/env bash
#
#/ command: github:delete-download: "Delete a download"
#
#/ usage: rerun github:delete-download  --file|-f <>  --owner <>  --repository <> [ --url <https://api.github.com>] [ --force <false>] 
#
#/ rerun env variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option variables: FILE OWNER REPOSITORY URL FORCE FORCE

# Read module function library.
. $RERUN_MODULE_DIR/lib/functions.sh || {
  echo >&2 "Failed loading function library." ; exit 1 ;
}

# Error handling
# ---------------
# * Trap calls `rerun_die` with standard message.
# * Exit upon command errors or accessing unset variables.
#   * See [set](http://ss64.com/bash/set.html)
trap 'rerun_die $? "*** command failed: github:delete-download. ***"' ERR
set -o nounset -o pipefail

# Parse the command options.
[[ -r $RERUN_MODULE_DIR/commands/delete-download/options.sh ]] && {
    . $RERUN_MODULE_DIR/commands/delete-download/options.sh || rerun_die "Failed loading options parser."
    rerun_options_parse "$@"
}

# ------------------------------
# Your implementation goes here.
# ------------------------------

if ! DOWNLOAD=$(rerun github:list-downloads --owner $OWNER --repository $REPOSITORY | grep "^$FILE:")
then
  if [[ $FORCE = "true" ]]
  then
    exit 0
  else
    rerun_die "download file \"$FILE\" doesn't exist"
  fi
fi

ID=$(echo $DOWNLOAD | cut -d: -f3)

# Get the user's API authorization key.
[[ -e ~/.rerun/github.authorization ]] || rerun_die "\"~/.rerun/github.authorization\": no such file or directory. use \"rerun github:get-authorization-token\"."
TOKEN=$(cat ~/.rerun/github.authorization | jq -r '.token')

# Delete the download file.
curl -sfK - <<!
-X DELETE
--url ${URL}/repos/${OWNER}/${REPOSITORY}/downloads/${ID}?access_token=${TOKEN}
!

exit $?

# Done
