#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: github:get-authorization-token: "Get an authorization token to access the API"
#/ usage: rerun github:get-authorization-token [ --api-url <https://api.github.com>] [ --authorization-file <$HOME/.rerun/github.authorization>] 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh get-authorization-token || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: github:get-authorization-token. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: API_URL AUTHORIZATION_FILE

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------

# - - -
# Put the command implementation here.
# - - -

# Get the credentials interactively.
read -rp "username: " USERNAME
read -rsp "password: " PASSWORD
echo

# Setup the authorization file's directory, if necessary.
if [[ -n $(dirname ${AUTHORIZATION_FILE}) ]]
then
  mkdir -p $(dirname ${AUTHORIZATION_FILE})
fi

touch ${AUTHORIZATION_FILE}
chmod 600 ${AUTHORIZATION_FILE}

# Prepare the content to post.
CONTENT=$(mktemp)
sed -e "s/\${LOGNAME}/${LOGNAME}/" -e "s/\${HOSTNAME}/${HOSTNAME}/" $RERUN_MODULE_DIR/templates/authorizations.json > ${CONTENT}

curl_github_api ${AUTHORIZATION_FILE} ${API_URL} AUTH /authorizations ${CONTENT} ${USERNAME} ${PASSWORD} > ${AUTHORIZATION_FILE}

# Cleanup.
rm -f ${CONTENT}

exit $?

# Done
