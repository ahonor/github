#!/usr/bin/env bash
#
#/ command: github:delete-repo-deploy-keys: "Delete repository deploy key(s) matching the specified title"
#
#/ usage: rerun github:delete-repo-deploy-keys  --owner <>  --repository <> [ --title <${USER}@${HOSTNAME}>] [ --api-url <https://api.github.com>] [ --authorization-file <$HOME/.rerun/github.authorization>] 
#
#/ rerun env variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option variables: OWNER REPOSITORY TITLE API_URL AUTHORIZATION_FILE

# Read module function library.
. $RERUN_MODULE_DIR/lib/functions.sh || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------
# * Trap calls `rerun_die` with standard message.
# * Exit upon command errors or accessing unset variables.
#   * See [set](http://ss64.com/bash/set.html)
trap 'rerun_die $? "*** command failed: github:delete-repo-deploy-keys. ***"' ERR
set -o nounset -o pipefail

# Parse the command options.
[[ -r $RERUN_MODULE_DIR/commands/delete-repo-deploy-keys/options.sh ]] && {
    . $RERUN_MODULE_DIR/commands/delete-repo-deploy-keys/options.sh || rerun_die "Failed loading options parser."
    rerun_options_parse "$@"
}


# ------------------------------
# Your implementation goes here.
# ------------------------------

# Run through the list of matching titles.
for ID in $(rerun github:list-repo-deploy-keys --owner ${OWNER} --repository ${REPOSITORY} | grep "^$TITLE:" | cut -d: -f2)
do
  curl_github_api ${AUTHORIZATION_FILE} ${API_URL} DELETE /repos/${OWNER}/${REPOSITORY}/keys/${ID}
  echo "deleted $ID"
done

exit $?

# Done
