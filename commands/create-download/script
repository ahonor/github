#!/usr/bin/env bash
#
#/ command: github:create-download: "Create a new download"
#
#/ usage: rerun github:create-download [ --content-type <application/x-rpm>] [ --description|-d <>]  --file <>  --owner <>  --repository <> [ --authorization-file <$HOME/.rerun/github.authorization>] [ --api-url <https://api.github.com>] [ --force <false>] 
#
#/ rerun env variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option variables: CONTENT_TYPE DESCRIPTION FILE OWNER REPOSITORY AUTHORIZATION_FILE API_URL FORCE

# Read module function library.
. $RERUN_MODULE_DIR/lib/functions.sh || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------
# * Trap calls `rerun_die` with standard message.
# * Exit upon command errors or accessing unset variables.
#   * See [set](http://ss64.com/bash/set.html)
trap 'rerun_die "*** command failed: github:create-download. ***"' ERR
set -o nounset -o pipefail

# Parse the command options.
[[ -r $RERUN_MODULE_DIR/commands/create-download/options.sh ]] && {
    . $RERUN_MODULE_DIR/commands/create-download/options.sh || rerun_die "Failed loading options parser."
    rerun_options_parse "$@"
}

# ------------------------------
# Your implementation goes here.
# ------------------------------

# Prepare the contents to post.
FILENAME=$(basename $FILE)

# Potentially delete an existing download in order to force the create to work.
if [[ $FORCE = "true" ]]
then
  rerun github:delete-download --owner ${OWNER} --repository ${REPOSITORY} --file ${FILE} --force true
fi

if [[ -z $DESCRIPTION ]]
then
  DESCRIPTION=$FILENAME
fi

SIZE=$(wc -c $FILE | awk '{print $1}')

CONTENT=$(mktemp)

echo "{
  \"name\": \"$FILENAME\",
  \"size\": $SIZE,
  \"description\": \"$DESCRIPTION\",
  \"content_type\": \"$CONTENT_TYPE\"
}" > ${CONTENT}

# Setup the download.
RESPONSE=$(mktemp)

curl_github_api ${AUTHORIZATION_FILE} ${API_URL} POST /repos/${OWNER}/${REPOSITORY}/downloads ${CONTENT} > ${RESPONSE}

# Upload the file to Amazon S3.
KEY=$(cat ${RESPONSE} | jq -r '.path')
ACL=$(cat ${RESPONSE} | jq -r '.acl')
NAME=$(cat ${RESPONSE} | jq -r '.name')
ACCESSKEYID=$(cat ${RESPONSE} | jq -r '.accesskeyid')
POLICY=$(cat ${RESPONSE} | jq -r '.policy')
SIGNATURE=$(cat ${RESPONSE} | jq -r '.signature')
MIME_TYPE=$(cat ${RESPONSE} | jq -r '.mime_type')

curl -sfLK - > /dev/null <<!
-F "key=${KEY}"
-F "acl=${ACL}"
-F "success_action_status=201"
-F "Filename=${NAME}"
-F "AWSAccessKeyId=${ACCESSKEYID}"
-F "Policy=${POLICY}"
-F "Signature=${SIGNATURE}"
-F "Content-Type=${MIME_TYPE}"
-F "file=@${FILE}"
--url https://github.s3.amazonaws.com/
!

# Cleanup.
rm -f ${CONTENT} ${RESPONSE}

exit $?

# Done
