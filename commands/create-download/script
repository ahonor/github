#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: github:create-download: "Create a new download"
#/ usage: rerun github:create-download [ --content-type <application/x-rpm>] [ --description|-d <>]  --file <>  --owner <>  --repository <> [ --authorization-file <$HOME/.rerun/github.authorization>] [ --api-url <https://api.github.com>] [ --force <false>] 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh create-download || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: github:create-download. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: CONTENT_TYPE DESCRIPTION FILE OWNER REPOSITORY AUTHORIZATION_FILE API_URL FORCE

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------

# - - -
# Put the command implementation here.
# - - -

# Prepare the contents to post.
FILENAME=$(basename $FILE)

# Potentially delete an existing download in order to force the create to work.
if [[ $FORCE = "true" ]]
then
  rerun github:delete-download --owner ${OWNER} --repository ${REPOSITORY} --file ${FILENAME} --force true
fi

if [[ -z $DESCRIPTION ]]
then
  DESCRIPTION=$FILENAME
fi

SIZE=$(wc -c $FILE | awk '{print $1}')

CONTENT=$(mktemp)

echo "{
  \"name\": \"$FILENAME\",
  \"size\": $SIZE,
  \"description\": \"$DESCRIPTION\",
  \"content_type\": \"$CONTENT_TYPE\"
}" > ${CONTENT}

# Setup the download.
RESPONSE=$(mktemp)

curl_github_api ${AUTHORIZATION_FILE} ${API_URL} POST /repos/${OWNER}/${REPOSITORY}/downloads ${CONTENT} > ${RESPONSE}

# Upload the file to Amazon S3.
KEY=$(cat ${RESPONSE} | jq -r '.path')
ACL=$(cat ${RESPONSE} | jq -r '.acl')
NAME=$(cat ${RESPONSE} | jq -r '.name')
ACCESSKEYID=$(cat ${RESPONSE} | jq -r '.accesskeyid')
POLICY=$(cat ${RESPONSE} | jq -r '.policy')
SIGNATURE=$(cat ${RESPONSE} | jq -r '.signature')
MIME_TYPE=$(cat ${RESPONSE} | jq -r '.mime_type')

curl -sfLK - > /dev/null <<!
-F "key=${KEY}"
-F "acl=${ACL}"
-F "success_action_status=201"
-F "Filename=${NAME}"
-F "AWSAccessKeyId=${ACCESSKEYID}"
-F "Policy=${POLICY}"
-F "Signature=${SIGNATURE}"
-F "Content-Type=${MIME_TYPE}"
-F "file=@${FILE}"
--url https://github.s3.amazonaws.com/
!

# Cleanup.
rm -f ${CONTENT} ${RESPONSE}

exit $?

# Done
