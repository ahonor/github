#!/usr/bin/env bash
#
#/ command: github:list-downloads: "List downloads for a repository"
#
#/ usage: rerun github:list-downloads  --owner <>  --repository <> [ --content-type <application/x-rpm>] [ --latest <false>] [ --api-url <https://api.github.com>] [ --authorization-file <$HOME/.rerun/github.authorization>] 
#
#/ rerun env variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option variables: OWNER REPOSITORY CONTENT_TYPE LATEST API_URL AUTHORIZATION_FILE

# Read module function library.
. $RERUN_MODULE_DIR/lib/functions.sh || {
  echo >&2 "Failed loading function library." ; exit 1 ;
}

# Error handling
# ---------------
# * Trap calls `rerun_die` with standard message.
# * Exit upon command errors or accessing unset variables.
#   * See [set](http://ss64.com/bash/set.html)
trap 'rerun_die $? "*** command failed: github:list-downloads. ***"' ERR
set -o nounset -o pipefail

# Parse the command options.
[[ -r $RERUN_MODULE_DIR/commands/list-downloads/options.sh ]] && {
    . $RERUN_MODULE_DIR/commands/list-downloads/options.sh || rerun_die "Failed loading options parser."
    rerun_options_parse "$@"
}

# ------------------------------
# Your implementation goes here.
# ------------------------------

# Display the names and identifiers.
if [[ $LATEST = "false" ]]
then
  FILTER="cat"
else
  FILTER="tail -1"
fi

curl_github_api ${AUTHORIZATION_FILE} ${API_URL} GET /repos/${OWNER}/${REPOSITORY}/downloads | jq -r '.[] | .name + ":" + .content_type + ":" + (.id | tostring)' | grep ":${CONTENT_TYPE}:" | sort -nt: -k3 | ${FILTER}

exit $?

# Done
