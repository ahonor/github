#!/usr/bin/env bash
#
#/ command: github:create-repo-deploy-key: "Create a repository deploy key"
#
#/ usage: rerun github:create-repo-deploy-key  --owner <>  --repository <> [ --title <${USER}@${HOSTNAME}>] [ --key-file <$HOME/.ssh/id_dsa.pub>] [ --api-url <https://api.github.com>] [ --authorization-file <$HOME/.rerun/github.authorization>] 
#
#/ rerun env variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option variables: OWNER REPOSITORY TITLE KEY_FILE API_URL AUTHORIZATION_FILE

# Read module function library.
. $RERUN_MODULE_DIR/lib/functions.sh || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------
# * Trap calls `rerun_die` with standard message.
# * Exit upon command errors or accessing unset variables.
#   * See [set](http://ss64.com/bash/set.html)
trap 'rerun_die "*** command failed: github:create-repo-deploy-key. ***"' ERR
set -o nounset -o pipefail

# Parse the command options.
[[ -r $RERUN_MODULE_DIR/commands/create-repo-deploy-key/options.sh ]] && {
    . $RERUN_MODULE_DIR/commands/create-repo-deploy-key/options.sh || rerun_die "Failed loading options parser."
    rerun_options_parse "$@"
}


# ------------------------------
# Your implementation goes here.
# ------------------------------

# Prepare the content to post.
CONTENT=$(mktemp)

echo "{
  \"title\": \"$TITLE\",
  \"key\": \"$(cat $KEY_FILE)\"
}" > ${CONTENT}

# Create the key.
ID=$(curl_github_api ${AUTHORIZATION_FILE} ${API_URL} POST /repos/${OWNER}/${REPOSITORY}/keys ${CONTENT} | jq -r '.id')
echo "created $ID"

# Cleanup.
rm -f ${CONTENT}

exit $?

# Done
